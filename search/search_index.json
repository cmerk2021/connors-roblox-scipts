{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Connor's Roblox Scripts","text":"<p>On this website, I will share all my useful roblox scripts, modules, and more that can be implimented into any Roblox game!</p> <p>My goal is to provide safe, easy to use items for any Roblox game. To learn more, you can email me or join my Discord Server!</p>"},{"location":"timer/","title":"Timer Module","text":""},{"location":"timer/#roblox-timer-module-documentation","title":"Roblox Timer Module Documentation","text":"<p>This module provides a simple and versatile timer functionality for your Roblox scripts. It allows creating timers with minutes and seconds, pausing/resuming them, and receiving notifications when the timer finishes.</p> <p>Features:</p> <ul> <li>Create timers with minutes and seconds.</li> <li>Optional progress callback to track remaining time during countdown.</li> <li>Pause and resume timers.</li> <li>Reset timers back to their original duration.</li> <li>Fire a custom event (optional) when the timer finishes.</li> </ul> <p>How to Use:</p> <ol> <li>Place the following script inside a <code>ModuleScript</code> in <code>ReplicatedStorage</code>.</li> </ol> <p><code>Timer.lua</code>:</p> <pre><code>local module = {}\n\nlocal function getFormattedTime(seconds)\n  local minutes = math.floor(seconds / 60)\n  local secondsLeft = seconds - minutes * 60\n  return minutes .. \"m \" .. secondsLeft .. \"s\"\nend\n\nlocal function timerThread(timer)\n  while timer.running do\n    wait(1)\n    if not timer.paused then\n      timer.remainingTime = timer.remainingTime - 1\n      if timer.remainingTime &lt;= 0 then\n        timer.running = false\n        timer.finishedEvent:Fire()\n      elseif timer.progressCallback then\n        timer.progressCallback(timer.remainingTime)\n      end\n    end\n  end\nend\n\nfunction module.new(minutes, seconds, finishedCallback, progressCallback, eventName)\n  local totalSeconds = minutes * 60 + seconds\n  local timer = {\n    remainingTime = totalSeconds,\n    running = true,\n    paused = false,\n    finishedEvent = eventName and Instance.new(\"BindableEvent\", eventName) or Instance.new(\"BindableEvent\"),\n    progressCallback = progressCallback,\n  }\n  if finishedCallback then\n    timer.finishedEvent:Connect(finishedCallback)\n  end\n  task.delay(0, function()\n    timerThread(timer)\n  end)\n  return timer\nend\n\nfunction module.getTimeLeft(timer)\n  if not timer.running then\n    return \"Timer Finished\"\n  end\n  return getFormattedTime(timer.remainingTime)\nend\n\nfunction module.pauseTimer(timer)\n  if timer.running then\n    timer.paused = true\n  end\nend\n\nfunction module.resumeTimer(timer)\n  if timer.paused then\n    timer.paused = false\n  end\nend\n\nfunction module.resetTimer(timer)\n  timer.remainingTime = timer.originalTime or 0 -- Consider adding an optional originalTime argument to new\n  timer.paused = false\nend\n\nreturn module\n</code></pre> <ol> <li>In any script, require the module:</li> </ol> <pre><code>local Timer = require(game.ReplicatedStorage.Timer)\n</code></pre> <p>Example Script:</p> <pre><code>local function onTimerFinish()\n  print(\"Timer finished!\")\nend\n\nlocal function onProgress(timeLeft)\n  print(\"Time remaining: \" .. Timer.getTimeLeft(myTimer))\nend\n\nlocal myTimer = Timer.new(\n  1, -- Minutes\n  30, -- Seconds\n  onTimerFinish, -- Finished Callback (Optional)\n  onProgress,  -- Progress Callback (Optional)\n  \"MyCustomFinishedEvent\" -- Custom Event Name (Optional)\n)\n\n-- After 1 minute and 30 seconds:\n--  * onTimerFinish function will be called.\n--  * onProgress function will be called periodically with remaining time.\n--  * \"MyCustomFinishedEvent\" will fire (if provided).\n\n-- You can pause, resume, and reset the timer:\nTimer.pauseTimer(myTimer)\nwait(30) -- Wait for 30 seconds\nTimer.resumeTimer(myTimer)\n\n-- Reset the timer back to 1 minute 30 seconds\nTimer.resetTimer(myTimer)\n</code></pre> <p>Additional Notes:</p> <ul> <li>The <code>finishedCallback</code> and <code>progressCallback</code> are optional arguments in the <code>new</code> function.</li> <li>If no custom event name is provided, a default <code>BindableEvent</code> is created.</li> <li>Use <code>Timer.getTimeLeft(timer)</code> to get the remaining time in a formatted string or \"Timer Finished\" if the timer has stopped.</li> </ul> <p>This documentation provides a basic overview of the module. You can explore the source code (<code>Timer.lua</code>) for a detailed understanding of each function and its behavior.</p>"}]}